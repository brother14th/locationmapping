// Code generated by MockGen. DO NOT EDIT.
// Source: userrepository.go

// Package db is a generated GoMock package.
package db

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// GetPreferredLocation mocks base method.
func (m *MockUserRepository) GetPreferredLocation(username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreferredLocation", username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreferredLocation indicates an expected call of GetPreferredLocation.
func (mr *MockUserRepositoryMockRecorder) GetPreferredLocation(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreferredLocation", reflect.TypeOf((*MockUserRepository)(nil).GetPreferredLocation), username)
}

// SetPreferredLocation mocks base method.
func (m *MockUserRepository) SetPreferredLocation(username, location string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPreferredLocation", username, location)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPreferredLocation indicates an expected call of SetPreferredLocation.
func (mr *MockUserRepositoryMockRecorder) SetPreferredLocation(username, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPreferredLocation", reflect.TypeOf((*MockUserRepository)(nil).SetPreferredLocation), username, location)
}

// ValidateUser mocks base method.
func (m *MockUserRepository) ValidateUser(username, password string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUser", username, password)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateUser indicates an expected call of ValidateUser.
func (mr *MockUserRepositoryMockRecorder) ValidateUser(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUser", reflect.TypeOf((*MockUserRepository)(nil).ValidateUser), username, password)
}
